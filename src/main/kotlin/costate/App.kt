/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package costate

import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.io.*
import kotlin.random.Random

class Number(val value: Int = Random(153454350).nextInt(100))
data class Context(@Transient val number: Number = Number()): Serializable

suspend fun testing() {

}

fun main() = runBlocking {

    val fsm = SMTest()
    // this: CoroutineScope
    launch {
        delay(200L)
        val context = Context()

        println("Fire")
        fsm.fireEvent("Test1", context)
        println("Fire Done")
        fsm.fireEvent("Test2", context)

        println("Save")
        val buffer = ByteArrayOutputStream(1000);
        ObjectOutputStream(BufferedOutputStream(buffer)).use { it.writeObject(fsm) }
        println("Buffer: $buffer")
        delay(2000)
        val newFsm = ObjectInputStream(BufferedInputStream(buffer.toByteArray().inputStream())).readObject() as StateMachine<String>

        println("Loaded")
        newFsm.fireEvent("Test3", context)
        newFsm.fireEvent("Test4", context)
        newFsm.fireEvent("Test5", context)

        println("Task from runBlocking")
    }

//    coroutineScope { // Creates a coroutine scope
//        launch {
//            delay(500L)
//            println("Task from nested launch")
//        }
//
//        delay(100L)
//        println("Task from coroutine scope") // This line will be printed before the nested launch
//    }

    println("Coroutine scope is over") // This line is not printed until the nested launch completes
}