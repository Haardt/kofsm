/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package costate

import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.io.*
import kotlin.coroutines.intrinsics.createCoroutineUnintercepted
import kotlin.random.Random

suspend fun setup(block: suspend GeneratorIterator<String>.() -> Unit): GeneratorIterator<String> {
    val iterator = GeneratorIterator<String>()
    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)
    return iterator
}

class Number(val value: Int = Random(153454350).nextInt(100))
data class Context(@Transient val number: Number = Number()): Serializable

fun main() = runBlocking {
    val fsm = setup {
        val variable = "Test ${smContext.number.value}"
        println("Step1 $event")
        waitForEvent()
        println("Step2 var: $variable / $event")
        waitForEvent()
        println("St3p4 $event")
        waitForEvent()

        println("Step5 ${smContext.number.value} $event")
    }
    // this: CoroutineScope
    launch {
        delay(200L)
        val context = Context()

        fsm.fireEvent("Test1", context)
        fsm.fireEvent("Test2", context)

        println("Save")
        val buffer = ByteOutputStream(1000);
        ObjectOutputStream(BufferedOutputStream(buffer)).use { it.writeObject(fsm) }
        println("Buffer: $buffer")
        delay(2000)
        val newFsm = ObjectInputStream(BufferedInputStream(buffer.newInputStream())).readObject() as GeneratorIterator<String>

        println("Loaded")
        newFsm.fireEvent("Test3", context)
        newFsm.fireEvent("Test4", context)
        newFsm.fireEvent("Test5", context)

        println("Task from runBlocking")
    }

//    coroutineScope { // Creates a coroutine scope
//        launch {
//            delay(500L)
//            println("Task from nested launch")
//        }
//
//        delay(100L)
//        println("Task from coroutine scope") // This line will be printed before the nested launch
//    }

    println("Coroutine scope is over") // This line is not printed until the nested launch completes
}